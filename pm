#!/usr/bin/env bash
# This script was generated by bashly 1.1.8 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

version_command() {
  echo "$version"
}

pm_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm - manage your projects the easy way\n"
    echo

  else
    printf "pm - manage your projects the easy way\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm COMMAND\n"
  printf "  pm [COMMAND] --help | -h\n"
  printf "  pm --version | -v\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   Show help about a command\n" "help    "
  printf "  %s   Space related commands\n" "space   "
  printf "  %s   Create a link to the pm script\n" "link    "
  printf "  %s   Remove the link to the pm script\n" "unlink  "
  printf "  %s   Update to the latest version\n" "update  "
  printf "  %s   Show environment information\n" "env     "
  printf "  %s   Template related commands\n" "template"
  echo
  printf "%s\n" "Project Commands:"
  printf "  %s   Create a new empty project\n" "new     "
  printf "  %s   Clone a remote git repository\n" "clone   "
  printf "  %s   Open a project\n" "open    "
  printf "  %s   Filter projects by name\n" "filter  "
  printf "  %s   List projects\n" "list    "
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    printf "%s\n" "Environment Variables:"

    printf "  %s\n" "EDITOR"
    printf "    Command used for interactive commands\n"
    printf "    Default: vim\n"
    echo

    printf "  %s\n" "PM_INSTALL_DIR"
    printf "    Directory where the repository was cloned\n"
    printf "    Default: ${HOME}/.pm\n"
    echo

    printf "  %s\n" "PM_HOME"
    printf "    Directory where the projects will be managed\n"
    printf "    Default: ${HOME}/dev\n"
    echo

    printf "  %s\n" "PM_BACKEND"
    printf "    Name of the backend used to open projects\n"
    printf "    Default: tmux\n"
    echo

    printf "  %s\n" "PM_SHOW_CMD"
    printf "    Command used to show templates\n"
    printf "    Default: cat\n"
    echo

  fi
}

pm_help_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm help - Show help about a command\n"
    echo

  else
    printf "pm help - Show help about a command\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm help [COMMAND]\n"
  printf "  pm help --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "COMMAND"
    printf "    Help subject\n"
    echo

  fi
}

pm_new_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm new - Create a new empty project\n"
    echo

  else
    printf "pm new - Create a new empty project\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm new NAME [OPTIONS]\n"
  printf "  pm new --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--space, -s SPACE (required)"
    printf "    Space of the new project\n"
    echo

    printf "  %s\n" "--template, -t TEMPLATE"
    printf "    Name of the template\n"
    printf "    Default: default\n"
    echo

    printf "  %s\n" "--backend, -b BACKEND"
    printf "    Name of the backend used to open projects\n"
    printf "    Default: ${PM_BACKEND}\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "NAME"
    printf "    Name of the new project\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm new recipe --space tools\n"
    printf "  pm new recipe --template cargo --space tools\n"
    echo

  fi
}

pm_clone_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm clone - Clone a remote git repository\n"
    echo

  else
    printf "pm clone - Clone a remote git repository\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm clone REPOSITORY [OPTIONS]\n"
  printf "  pm clone --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--space, -s SPACE (required)"
    printf "    Space to clone the project in\n"
    echo

    printf "  %s\n" "--name, -n NAME (required)"
    printf "    Name to clone the project as\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "REPOSITORY"
    printf "    Remote repository url\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm clone alexis-moins/recipe --space tools --name recipe\n"
    printf "  pm clone neovim/neovim --space tools --name editor\n"
    echo

  fi
}

pm_open_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm open - Open a project\n"
    echo

  else
    printf "pm open - Open a project\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm open [NAME] [OPTIONS]\n"
  printf "  pm open --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--space, -s SPACE"
    printf "    Space where the project is located\n"
    echo

    printf "  %s\n" "--backend, -b BACKEND"
    printf "    Name of the backend used to open projects\n"
    printf "    Default: ${PM_BACKEND}\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "NAME"
    printf "    Name of the project\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm open recipe\n"
    printf "  pm open editor --space tools\n"
    echo

  fi
}

pm_filter_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm filter - Filter projects by name\n"
    echo

  else
    printf "pm filter - Filter projects by name\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm filter [OPTIONS]\n"
  printf "  pm filter --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--path, -p"
    printf "    Output the full path to the project\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm filter\n"
    printf "  pm filter --path\n"
    echo

  fi
}

pm_space_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm space - Space related commands\n"
    echo

  else
    printf "pm space - Space related commands\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm space COMMAND\n"
  printf "  pm space [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   Add a new space\n" "add   "
  printf "  %s   List added spaces\n" "list  "
  printf "  %s   Remove a space (projects will not be removed)\n" "remove"
  printf "  %s   Filter spaces by name\n" "filter"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

pm_space_add_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm space add - Add a new space\n"
    echo

  else
    printf "pm space add - Add a new space\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm space add SPACE\n"
  printf "  pm space add --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "SPACE"
    printf "    Name of the space to add\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm space add personal\n"
    echo

  fi
}

pm_space_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm space list - List added spaces\n"
    echo

  else
    printf "pm space list - List added spaces\n"
    echo

  fi

  printf "Alias: ls\n"
  echo

  printf "%s\n" "Usage:"
  printf "  pm space list\n"
  printf "  pm space list --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm space ls\n"
    printf "  pm space list\n"
    echo

  fi
}

pm_space_remove_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm space remove - Remove a space (projects will not be removed)\n"
    echo

  else
    printf "pm space remove - Remove a space (projects will not be removed)\n"
    echo

  fi

  printf "Alias: rm\n"
  echo

  printf "%s\n" "Usage:"
  printf "  pm space remove SPACE\n"
  printf "  pm space remove --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "SPACE"
    printf "    Name of the space to remove\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm space rm personal\n"
    echo

  fi
}

pm_space_filter_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm space filter - Filter spaces by name\n"
    echo

  else
    printf "pm space filter - Filter spaces by name\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm space filter\n"
  printf "  pm space filter --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm space filter\n"
    echo

  fi
}

pm_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm list - List projects\n"
    echo

  else
    printf "pm list - List projects\n"
    echo

  fi

  printf "Alias: ls\n"
  echo

  printf "%s\n" "Usage:"
  printf "  pm list\n"
  printf "  pm list --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm ls\n"
    printf "  pm list\n"
    echo

  fi
}

pm_link_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm link - Create a link to the pm script\n"
    echo

  else
    printf "pm link - Create a link to the pm script\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm link [PATH] [OPTIONS]\n"
  printf "  pm link --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--copy, -c"
    printf "    Copy the script instead of creating a symbolic link\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "PATH"
    printf "    Path to the link\n"
    printf "    Default: ${HOME}/.local/bin\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm link -c\n"
    printf "  pm link /usr/bin\n"
    echo

  fi
}

pm_unlink_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm unlink - Remove the link to the pm script\n"
    echo

  else
    printf "pm unlink - Remove the link to the pm script\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm unlink [PATH]\n"
  printf "  pm unlink --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "PATH"
    printf "    Path to the link\n"
    printf "    Default: ${HOME}/.local/bin\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm unlink\n"
    echo

  fi
}

pm_update_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm update - Update to the latest version\n"
    echo

  else
    printf "pm update - Update to the latest version\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm update\n"
  printf "  pm update --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm update\n"
    echo

  fi
}

pm_env_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm env - Show environment information\n"
    echo

  else
    printf "pm env - Show environment information\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm env [VARIABLE]\n"
  printf "  pm env --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "VARIABLE"
    printf "    Name of the environment variable to show\n"
    printf "    Allowed: PM_INSTALL_DIR, PM_HOME, PM_BACKEND, PM_SHOW_CMD\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm env\n"
    printf "  pm env PM_HOME\n"
    echo

  fi
}

pm_template_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm template - Template related commands\n"
    echo

  else
    printf "pm template - Template related commands\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm template COMMAND\n"
  printf "  pm template [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   List templates\n" "list"
  printf "  %s   Show a template\n" "show"
  printf "  %s   Create a new template\n" "new "
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

pm_template_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm template list - List templates\n"
    echo

  else
    printf "pm template list - List templates\n"
    echo

  fi

  printf "Alias: ls\n"
  echo

  printf "%s\n" "Usage:"
  printf "  pm template list\n"
  printf "  pm template list --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm template ls\n"
    printf "  pm template list\n"
    echo

  fi
}

pm_template_show_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm template show - Show a template\n"
    echo

  else
    printf "pm template show - Show a template\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm template show TEMPLATE [OPTIONS]\n"
  printf "  pm template show --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--exec, -e EXECUTABLE"
    printf "    Command used to show the template\n"
    printf "    Default: ${PM_SHOW_CMD}\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "TEMPLATE"
    printf "    Name of the template\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm template show cargo\n"
    printf "  pm template show cargo -e bat\n"
    echo

  fi
}

pm_template_new_usage() {
  if [[ -n $long_usage ]]; then
    printf "pm template new - Create a new template\n"
    echo

  else
    printf "pm template new - Create a new template\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  pm template new TEMPLATE\n"
  printf "  pm template new --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "TEMPLATE"
    printf "    Name of the template\n"
    echo

    printf "%s\n" "Examples:"
    printf "  pm template new poetry\n"
    echo

  fi
}

normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

filter_project() {
    command fd --type d --max-depth 1 --base-directory "${PM_HOME}" . $(cat "${PM_HOME}/spaces") \
    | sort --unique \
    | gum filter --placeholder "Select a project"
}

filter_project_by_space() {
    command fd --type d --max-depth 1 --base-directory "${PM_HOME}" "${1}" \
        | sort --unique \
        | command "${deps[gum]}" filter --placeholder "Select a project"
}

filter_space() {
    command cat "${PM_HOME}/spaces" | command "${deps[gum]}" filter --placeholder "Select a space"
}

error() {
    echo "$(red "pm:") ${1}"
}

info() {
    echo "$(blue "pm:") ${1}"
}

success() {
    echo "$(green "pm:") ${1}"
}

warn() {
    echo "$(yellow "pm:") ${1}"
}

project_exists() {
    [[ -d "${PM_HOME}/${1}/${2}" ]] && return 0 || return 1
}

run_silent() {
  command ${@} &> /dev/null
}

validate_dir_exists() {
  [[ -d "$1" ]] || echo "must be an existing directory"
}

validate_file_exists() {
  [[ -f "$1" ]] || echo "must be an existing file"
}

validate_integer() {
  [[ "$1" =~ ^[0-9]+$ ]] || echo "must be an integer"
}

validate_not_empty() {
  [[ -z "$1" ]] && echo "must not be empty"
}

validate_space_exists() {
    if [[ ! -d "${PM_HOME}/${1}" ]]; then
        echo "${1} must be an existing space"
        echo -e "\nSee $(yellow_underlined pm space list)"
    fi
}

validate_space_is_missing() {
    if command "${deps[rg]}" --quiet "${1}" "${PM_HOME}/spaces"; then
        echo "${1} is already a registered space"
        echo -e "\nSee $(yellow_underlined pm space list)"
    fi
}

validate_template_exists() {
    if [[ ! -f "${PM_INSTALL_DIR}/templates/${1}.sh" ]] && [[ ! -f "${HOME}/.config/pm/templates/${1}.sh" ]]; then
        error "template ${1} not found"
    fi
}

validate_template_is_missing() {
    if [[ -f "${HOME}/.config/pm/templates/${1}.sh" ]]; then
        error "template ${1} already exists"
    fi
}

pm_help_command() {
  command="${args[command]:-}"
  long_usage=yes

  if [[ -z "$command" ]]; then
    # No command argument, show the global help
    help_function=pm_usage
  else
    # Show the help for the requested command
    help_function="pm_${command}_usage"
  fi

  # Call the help function if it exists
  if [[ $(type -t "$help_function") ]]; then
    "$help_function"
  else
    echo "No help available for this command"
    exit 1
  fi

}

pm_new_command() {
  local name="${args[name]}"
  local space="${args[--space]}"

  local template_name="${args[--template]}"
  local backend_name="${args[--backend]}"

  local project="${space}/${name}"

  local path="${PM_HOME}/${project}"

  if [[ -d "${path}" ]]; then
      error "project '${name}' already exists in space '${space}'"
      exit 1
  fi

  # Search for user templates first
  local template="${HOME}/.config/pm/templates/${template_name}.sh"

  if [[ ! -f "${template}" ]]; then
      # Then search for pm templates
      template="${PM_INSTALL_DIR}/templates/${template_name}.sh"

      if [[ ! -f "${template}" ]]; then
          error "template '${template_name}' not found"
          exit 1
      fi
  fi

  if source "${template}" "${space}" "${name}" "${path}"; then
      success "project '${name}' created in space '${space}'"
  else
      error "unable to create project"
      exit 1
  fi

  # Search for user backend first
  local backend="${HOME}/.config/pm/backends/${backend_name}.sh"

  if [[ ! -f "${backend}" ]]; then
      # Then search for pm backends
      backend="${PM_INSTALL_DIR}/backends/${backend_name}.sh"

      if [[ ! -f "${backend}" ]]; then
          error "backend '${backend_name}' not found"
          exit 1
      fi
  fi

  source "${backend}" "${space}" "${name}" "${path}"

}

pm_clone_command() {
  local repository="${args[repository]}"

  local name="${args[--name]}"
  local space="${args[--space]}"

  if [[ -d "${PM_HOME}/${destination}/${name}" ]]; then
      error "space '${space}' already contains this project"
      exit 1
  fi

  local destination="${PM_HOME}/${space}/${name}"

  command "${deps[git]}" clone "${repository}" "${destination}"
  success "cloned project ${name} in space ${space}"

}

pm_open_command() {
  local name="${args[name]}"
  local space="${args[--space]}"

  local backend_name="${args[--backend]}"

  if [[ -z "${name}" ]]; then
      if [[ -z "${space}" ]]; then
          project="$(filter_project)"
      else
          project="$(filter_project_by_space "${space}")"
      fi

      name=`basename "${project}"`
      space=`dirname "${project}"`
  else
      if [[ -z "${space}" ]]; then
          error "must use --space flag with argumet NAME"
          return 1
      fi
  fi

  if ! project_exists "${space}" "${name}"; then
      error "no project '${name}' in space '${space}'"
      exit 1
  fi

  # Search for user backend first
  local backend="${HOME}/.config/pm/backends/${backend_name}.sh"

  if [[ ! -f "${backend}" ]]; then
      # Then search for pm backends
      backend="${PM_INSTALL_DIR}/backends/${backend_name}.sh"

      if [[ ! -f "${backend}" ]]; then
          error "backend '${backend_name}' not found"
          return 1
      fi
  fi

  local path="${PM_HOME}/${space}/${name}"

  source "${backend}" "${space}" "${name}" "${path}"

}

pm_filter_command() {
  local path="${args[--path]}"

  local project="$(filter_project)"
  [[ -z "${project}" ]] && exit 1

  [[ -n "${path}" ]] && project="${PM_HOME}/${project}"

  echo "${project}"

}

pm_space_add_command() {
  local space="${args[space]}"
  local SPACE_INDEX="${PM_HOME}/spaces"

  [[ ! -d "${PM_HOME}/${space}" ]] && command mkdir -p "${PM_HOME}/${space}" &> /dev/null
  echo "${space}" >> "${SPACE_INDEX}"

  command sort --unique "${SPACE_INDEX}" --output "${SPACE_INDEX}"
  success "new space added"

}

pm_space_list_command() {
  if [[ -f "${PM_HOME}/spaces" ]]; then
      cat "${PM_HOME}/spaces"
  fi

}

pm_space_remove_command() {
  local space="${args[space]}"

  local new_spaces="$(command "${deps[rg]}" -vN --color=never "${space}" "${PM_HOME}/spaces")"

  echo "${new_spaces}" > "${PM_HOME}/spaces"
  success "space removed from index"

}

pm_space_filter_command() {
  filter_space

}

pm_list_command() {
  command fd --type d --max-depth 1 --base-directory "${PM_HOME}" . $(cat "${PM_HOME}/spaces") | sort --unique

}

pm_link_command() {
  local path="${args[path]}"
  local copy="${args[--copy]}"

  local source="${PM_INSTALL_DIR}"

  if [[ -f "${path}/pm" ]]; then
      error "there is already a link in ${path}"
      exit 1
  fi

  if [[ ! -d "${source}" ]]; then
      error "source directory ${source} does not exist"
      exit 1
  fi

  if [[ ! -f "${source}/pm" ]]; then
      error "script 'pm' not found in ${source}"
      exit 1
  fi

  local executable=`test -n "${copy}" && echo "cp" || echo "ln -s"`

  command ${executable} "${source}/pm" "${path}/pm"
  success "link created in ${path}"

}

pm_unlink_command() {
  local path="${args[path]}"

  if [[ -f "${path}/pm" ]]; then
      run_silent rm "${path}/pm"

      success "link removed from ${path}"
  else
      error "no link found in ${path}"
      exit 1
  fi

}

pm_update_command() {
  if [[ ! -d "${PM_INSTALL_DIR}" ]]; then
      warn "no pm install directory."
      warn "check documentation for installation instruction."
      exit 1
  fi

  command "${deps[git]}" -C "${PM_INSTALL_DIR}" pull

}

pm_env_command() {
  local variable="${args[variable]}"

  if [[ -n "${variable}" ]]; then
      echo "${!variable}"
  else
      echo "PM_INSTALL_DIR=${PM_INSTALL_DIR}"
      echo "PM_HOME=${PM_HOME}"
      echo "PM_BACKEND=${PM_BACKEND}"
      echo "PM_SHOW_CMD=${PM_SHOW_CMD}"
  fi

}

pm_template_list_command() {
  for file in $(command ls "${PM_INSTALL_DIR}/templates"); do
      if [[ -f "${HOME}/.config/pm/templates/${file}" ]]; then
          continue
      fi

      echo "${file::-3}"
  done

  # Exit if not user templates directory
  [[ ! -d "${HOME}/.config/pm/templates" ]] && exit 0

  for file in $(command ls "${HOME}/.config/pm/templates"); do
      echo "${file::-3}"
  done

}

pm_template_show_command() {
  local template_name="${args[template]}"
  local command="${args[--exec]}"
  #
  # Search for user templates first
  local template="${HOME}/.config/pm/templates/${template_name}.sh"

  if [[ -f "${template}" ]]; then
      command ${command} "${template}"
  else
      command ${command} "${PM_INSTALL_DIR}/templates/${template_name}.sh"
  fi

}

pm_template_new_command() {
  local template_name="${args[template]}"

  local pm_template="${PM_INSTALL_DIR}/templates/default.sh"

  [[ ! -d "${HOME}/.config/pm/templates" ]] && command mkdir -p "${HOME}/.config/pm/templates"

  local new_template_path="${HOME}/.config/pm/templates/${template_name}.sh"

  command cp "${pm_template}" "${new_template_path}"

  command "${EDITOR}" ${new_template_path}

}

parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        pm_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  export EDITOR="${EDITOR:-vim}"
  export PM_INSTALL_DIR="${PM_INSTALL_DIR:-${HOME}/.pm}"
  export PM_HOME="${PM_HOME:-${HOME}/dev}"
  export PM_BACKEND="${PM_BACKEND:-tmux}"
  export PM_SHOW_CMD="${PM_SHOW_CMD:-cat}"

  env_var_names+=("EDITOR")
  env_var_names+=("PM_INSTALL_DIR")
  env_var_names+=("PM_HOME")
  env_var_names+=("PM_BACKEND")
  env_var_names+=("PM_SHOW_CMD")

  if command -v git >/dev/null 2>&1; then
    deps['git']="$(command -v git | head -n1)"
  else
    printf "missing dependency: git\n" >&2
    exit 1
  fi

  if command -v fd >/dev/null 2>&1; then
    deps['fd']="$(command -v fd | head -n1)"
  else
    printf "missing dependency: fd\n" >&2
    exit 1
  fi

  if command -v gum >/dev/null 2>&1; then
    deps['gum']="$(command -v gum | head -n1)"
  else
    printf "missing dependency: gum\n" >&2
    exit 1
  fi

  action=${1:-}

  case $action in
    -*) ;;

    help)
      action="help"
      shift
      pm_help_parse_requirements "$@"
      shift $#
      ;;

    new)
      action="new"
      shift
      pm_new_parse_requirements "$@"
      shift $#
      ;;

    clone)
      action="clone"
      shift
      pm_clone_parse_requirements "$@"
      shift $#
      ;;

    open)
      action="open"
      shift
      pm_open_parse_requirements "$@"
      shift $#
      ;;

    filter)
      action="filter"
      shift
      pm_filter_parse_requirements "$@"
      shift $#
      ;;

    space)
      action="space"
      shift
      pm_space_parse_requirements "$@"
      shift $#
      ;;

    list | ls)
      action="list"
      shift
      pm_list_parse_requirements "$@"
      shift $#
      ;;

    link)
      action="link"
      shift
      pm_link_parse_requirements "$@"
      shift $#
      ;;

    unlink)
      action="unlink"
      shift
      pm_unlink_parse_requirements "$@"
      shift $#
      ;;

    update)
      action="update"
      shift
      pm_update_parse_requirements "$@"
      shift $#
      ;;

    env)
      action="env"
      shift
      pm_env_parse_requirements "$@"
      shift $#
      ;;

    template)
      action="template"
      shift
      pm_template_parse_requirements "$@"
      shift $#
      ;;

    "")
      pm_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

pm_help_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_help_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="help"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['command']+x} ]]; then
          args['command']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

pm_new_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_new_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="new"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --space | -s)

        if [[ -n ${2+x} ]]; then
          args['--space']="$2"
          shift
          shift
        else
          printf "%s\n" "--space requires an argument: --space, -s SPACE" >&2
          exit 1
        fi
        ;;

      --template | -t)

        if [[ -n ${2+x} ]]; then
          args['--template']="$2"
          shift
          shift
        else
          printf "%s\n" "--template requires an argument: --template, -t TEMPLATE" >&2
          exit 1
        fi
        ;;

      --backend | -b)

        if [[ -n ${2+x} ]]; then
          args['--backend']="$2"
          shift
          shift
        else
          printf "%s\n" "--backend requires an argument: --backend, -b BACKEND" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: pm new NAME [OPTIONS]\n" >&2
    exit 1
  fi

  if [[ -z ${args['--space']+x} ]]; then
    printf "missing required flag: --space, -s SPACE\n" >&2
    exit 1
  fi

  [[ -n ${args['--template']:-} ]] || args['--template']="default"
  [[ -n ${args['--backend']:-} ]] || args['--backend']="${PM_BACKEND}"

  if [[ -v args['--space'] && -n $(validate_space_exists "${args['--space']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "--space, -s SPACE" "$(validate_space_exists "${args['--space']:-}")" >&2
    exit 1
  fi

}

pm_clone_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_clone_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="clone"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --space | -s)

        if [[ -n ${2+x} ]]; then
          args['--space']="$2"
          shift
          shift
        else
          printf "%s\n" "--space requires an argument: --space, -s SPACE" >&2
          exit 1
        fi
        ;;

      --name | -n)

        if [[ -n ${2+x} ]]; then
          args['--name']="$2"
          shift
          shift
        else
          printf "%s\n" "--name requires an argument: --name, -n NAME" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['repository']+x} ]]; then
          args['repository']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['repository']+x} ]]; then
    printf "missing required argument: REPOSITORY\nusage: pm clone REPOSITORY [OPTIONS]\n" >&2
    exit 1
  fi

  if [[ -z ${args['--space']+x} ]]; then
    printf "missing required flag: --space, -s SPACE\n" >&2
    exit 1
  fi
  if [[ -z ${args['--name']+x} ]]; then
    printf "missing required flag: --name, -n NAME\n" >&2
    exit 1
  fi

  if [[ -v args['--space'] && -n $(validate_space_exists "${args['--space']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "--space, -s SPACE" "$(validate_space_exists "${args['--space']:-}")" >&2
    exit 1
  fi

}

pm_open_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_open_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="open"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --space | -s)

        if [[ -n ${2+x} ]]; then
          args['--space']="$2"
          shift
          shift
        else
          printf "%s\n" "--space requires an argument: --space, -s SPACE" >&2
          exit 1
        fi
        ;;

      --backend | -b)

        if [[ -n ${2+x} ]]; then
          args['--backend']="$2"
          shift
          shift
        else
          printf "%s\n" "--backend requires an argument: --backend, -b BACKEND" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['name']+x} ]]; then
          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  [[ -n ${args['--backend']:-} ]] || args['--backend']="${PM_BACKEND}"

  if [[ -v args['--space'] && -n $(validate_space_exists "${args['--space']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "--space, -s SPACE" "$(validate_space_exists "${args['--space']:-}")" >&2
    exit 1
  fi

}

pm_filter_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_filter_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="filter"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --path | -p)

        args['--path']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

pm_space_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_space_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    add)
      action="add"
      shift
      pm_space_add_parse_requirements "$@"
      shift $#
      ;;

    list | ls)
      action="list"
      shift
      pm_space_list_parse_requirements "$@"
      shift $#
      ;;

    remove | rm)
      action="remove"
      shift
      pm_space_remove_parse_requirements "$@"
      shift $#
      ;;

    filter)
      action="filter"
      shift
      pm_space_filter_parse_requirements "$@"
      shift $#
      ;;

    "")
      pm_space_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

pm_space_add_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_space_add_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="space add"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['space']+x} ]]; then
          args['space']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['space']+x} ]]; then
    printf "missing required argument: SPACE\nusage: pm space add SPACE\n" >&2
    exit 1
  fi

  if [[ -v args['space'] && -n $(validate_space_is_missing "${args['space']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "SPACE" "$(validate_space_is_missing "${args['space']:-}")" >&2
    exit 1
  fi

}

pm_space_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_space_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="space list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

pm_space_remove_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_space_remove_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="space remove"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['space']+x} ]]; then
          args['space']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['space']+x} ]]; then
    printf "missing required argument: SPACE\nusage: pm space remove SPACE\n" >&2
    exit 1
  fi

  if [[ -v args['space'] && -n $(validate_space_exists "${args['space']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "SPACE" "$(validate_space_exists "${args['space']:-}")" >&2
    exit 1
  fi

}

pm_space_filter_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_space_filter_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="space filter"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

pm_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

pm_link_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_link_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="link"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --copy | -c)

        args['--copy']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['path']+x} ]]; then
          args['path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  [[ -n ${args['path']:-} ]] || args['path']="${HOME}/.local/bin"

}

pm_unlink_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_unlink_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="unlink"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['path']+x} ]]; then
          args['path']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  [[ -n ${args['path']:-} ]] || args['path']="${HOME}/.local/bin"

}

pm_update_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_update_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="update"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

pm_env_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_env_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="env"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['variable']+x} ]]; then
          args['variable']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -n ${args['variable']:-} ]] && [[ ! ${args['variable']:-} =~ ^(PM_INSTALL_DIR|PM_HOME|PM_BACKEND|PM_SHOW_CMD)$ ]]; then
    printf "%s\n" "variable must be one of: PM_INSTALL_DIR, PM_HOME, PM_BACKEND, PM_SHOW_CMD" >&2
    exit 1
  fi

}

pm_template_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_template_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    list | ls)
      action="list"
      shift
      pm_template_list_parse_requirements "$@"
      shift $#
      ;;

    show)
      action="show"
      shift
      pm_template_show_parse_requirements "$@"
      shift $#
      ;;

    new)
      action="new"
      shift
      pm_template_new_parse_requirements "$@"
      shift $#
      ;;

    "")
      pm_template_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

pm_template_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_template_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="template list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

pm_template_show_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_template_show_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="template show"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --exec | -e)

        if [[ -n ${2+x} ]]; then
          args['--exec']="$2"
          shift
          shift
        else
          printf "%s\n" "--exec requires an argument: --exec, -e EXECUTABLE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['template']+x} ]]; then
          args['template']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['template']+x} ]]; then
    printf "missing required argument: TEMPLATE\nusage: pm template show TEMPLATE [OPTIONS]\n" >&2
    exit 1
  fi

  [[ -n ${args['--exec']:-} ]] || args['--exec']="${PM_SHOW_CMD}"

  if [[ -v args['template'] && -n $(validate_template_exists "${args['template']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "TEMPLATE" "$(validate_template_exists "${args['template']:-}")" >&2
    exit 1
  fi

}

pm_template_new_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        pm_template_new_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="template new"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['template']+x} ]]; then
          args['template']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['template']+x} ]]; then
    printf "missing required argument: TEMPLATE\nusage: pm template new TEMPLATE\n" >&2
    exit 1
  fi

  if [[ -v args['template'] && -n $(validate_template_is_missing "${args['template']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "TEMPLATE" "$(validate_template_is_missing "${args['template']:-}")" >&2
    exit 1
  fi

}

initialize() {
  version="1.5.0"
  long_usage=''
  set -e

  export EDITOR="${EDITOR:-vim}"
  export PM_INSTALL_DIR="${PM_INSTALL_DIR:-${HOME}/.pm}"
  export PM_HOME="${PM_HOME:-${HOME}/dev}"
  export PM_BACKEND="${PM_BACKEND:-tmux}"
  export PM_SHOW_CMD="${PM_SHOW_CMD:-cat}"

  local SPACE_INDEX="${PM_HOME}/spaces"

  [[ ! -d "${PM_HOME}" ]] && command mkdir -p "${PM_HOME}"
  [[ ! -f "${SPACE_INDEX}" ]] && touch "${SPACE_INDEX}"

  # Create directories if not present
  for space in $(cat "${SPACE_INDEX}"); do
      [[ ! -d "${PM_HOME}/${space}" ]] && command mkdir -p "${PM_HOME}/${space}"
  done

  command sort --unique "${SPACE_INDEX}" --output "${SPACE_INDEX}"

}

run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "help") pm_help_command ;;
    "new") pm_new_command ;;
    "clone") pm_clone_command ;;
    "open") pm_open_command ;;
    "filter") pm_filter_command ;;
    "space") pm_space_command ;;
    "space add") pm_space_add_command ;;
    "space list") pm_space_list_command ;;
    "space remove") pm_space_remove_command ;;
    "space filter") pm_space_filter_command ;;
    "list") pm_list_command ;;
    "link") pm_link_command ;;
    "unlink") pm_unlink_command ;;
    "update") pm_update_command ;;
    "env") pm_env_command ;;
    "template") pm_template_command ;;
    "template list") pm_template_list_command ;;
    "template show") pm_template_show_command ;;
    "template new") pm_template_new_command ;;
  esac
}

initialize
run "$@"
