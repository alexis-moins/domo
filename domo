#!/usr/bin/env bash
# This script was generated by bashly 1.2.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "$(error)bash version 4 or higher is required\n" >&2
  exit 1
fi

version_command() {
  echo "$version"
}

domo_usage() {
  printf "domo - manage your projects the easy way\n\n"

  printf "%s\n" "Usage:"
  printf "  domo COMMAND\n"
  printf "  domo [COMMAND] --help | -h\n"
  printf "  domo --version | -v\n"
  echo

  printf "%s\n" "Project Commands:"
  printf "  %s   Create a new project\n" "create    "
  printf "  %s   Clone a remote git repository\n" "clone     "
  printf "  %s   Open a project\n" "open      "
  printf "  %s   List projects\n" "list      "
  echo
  printf "%s\n" "Commands:"
  printf "  %s   Space related commands\n" "space     "
  printf "  %s   Template related commands\n" "template  "
  printf "  %s   Backend related commands\n" "backend   "
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    printf "%s\n" "Environment Variables:"

    printf "  %s\n" "DOMO_HOME"
    printf "    Directory where the projects will be managed\n"
    printf "    %s\n" "Default: ${HOME}/dev"
    echo

    printf "  %s\n" "DOMO_SHOW_CMD"
    printf "    Command used to show backends & templates\n"
    printf "    %s\n" "Default: cat"
    echo

  fi
}

domo_create_usage() {
  printf "domo create - Create a new project\n\n"

  printf "%s\n" "Usage:"
  printf "  domo create [PATH] [OPTIONS]\n"
  printf "  domo create --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--template, -t TEMPLATE (required)"
    printf "    Name of the template\n"
    echo

    printf "  %s\n" "--backend, -b BACKEND"
    printf "    Name of the backend used to open projects\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "PATH"
    printf "    Path to the project\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo create tools/recipe -t cargo\n"
    printf "  domo create tools/recipe -t cargo -b vscode\n"
    echo

  fi
}

domo_clone_usage() {
  printf "domo clone - Clone a remote git repository\n\n"

  printf "%s\n" "Usage:"
  printf "  domo clone REPOSITORY PATH\n"
  printf "  domo clone --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "REPOSITORY"
    printf "    Remote repository url\n"
    echo

    printf "  %s\n" "PATH"
    printf "    Path to the project\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo clone git@github.com:alexis-moins/recipe.git tools/recipe\n"
    echo

  fi
}

domo_open_usage() {
  printf "domo open - Open a project\n\n"
  printf "Alias: o\n"
  echo

  printf "%s\n" "Usage:"
  printf "  domo open [PATH] [OPTIONS]\n"
  printf "  domo open --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--backend, -b BACKEND"
    printf "    Name of the backend used to open projects\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "PATH"
    printf "    Path to the project\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo open tools/recipe\n"
    printf "  domo open tools/recipe -b vscode\n"
    echo

  fi
}

domo_list_usage() {
  printf "domo list - List projects\n\n"
  printf "Alias: ls\n"
  echo

  printf "%s\n" "Usage:"
  printf "  domo list\n"
  printf "  domo list --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo ls\n"
    printf "  domo list\n"
    echo

  fi
}

domo__install_usage() {
  printf "domo _install - Installation helper command\n\n"

  printf "%s\n" "Usage:"
  printf "  domo _install DESTINATION\n"
  printf "  domo _install --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "DESTINATION"
    printf "    Path to install the script\n"
    echo

    printf "This command is private and not intended for public use.\n\nIt is used to install the domo script in a specific location, and it\nshould not be used by end users. Use the \`install.sh\` script instead.\n\n"
    echo

  fi
}

domo__uninstall_usage() {
  printf "domo _uninstall - Uninstallation helper command\n\n"

  printf "%s\n" "Usage:"
  printf "  domo _uninstall DESTINATION\n"
  printf "  domo _uninstall --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "DESTINATION"
    printf "    Path to install the script\n"
    echo

    printf "This command is private and not intended for public use.\n\nIt is used to uninstall the domo script, and it should not be used by\nend users. Use the \`uninstall.sh\` script instead.\n\n"
    echo

  fi
}

domo_space_usage() {
  printf "domo space - Space related commands\n\n"

  printf "%s\n" "Usage:"
  printf "  domo space COMMAND\n"
  printf "  domo space [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   Add a new space\n" "add "
  printf "  %s   List spaces\n" "list"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

domo_space_add_usage() {
  printf "domo space add - Add a new space\n\n"

  printf "%s\n" "Usage:"
  printf "  domo space add SPACES...\n"
  printf "  domo space add --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "SPACES..."
    printf "    Name of the spaces to add\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo space add A B C\n"
    echo

  fi
}

domo_space_list_usage() {
  printf "domo space list - List spaces\n\n"
  printf "Alias: ls\n"
  echo

  printf "%s\n" "Usage:"
  printf "  domo space list\n"
  printf "  domo space list --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo space ls\n"
    printf "  domo space list\n"
    echo

  fi
}

domo_template_usage() {
  printf "domo template - Template related commands\n\n"
  printf "Alias: temp\n"
  echo

  printf "%s\n" "Usage:"
  printf "  domo template COMMAND\n"
  printf "  domo template [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   List templates\n" "list "
  printf "  %s   Show a template\n" "show "
  printf "  %s   Add a new template\n" "add  "
  printf "  %s   Edit a template\n" "edit "
  printf "  %s   Locates a template\n" "which"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

domo_template_list_usage() {
  printf "domo template list - List templates\n\n"
  printf "Alias: ls\n"
  echo

  printf "%s\n" "Usage:"
  printf "  domo template list\n"
  printf "  domo template list --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo template list\n"
    echo

  fi
}

domo_template_show_usage() {
  printf "domo template show - Show a template\n\n"

  printf "%s\n" "Usage:"
  printf "  domo template show TEMPLATE [OPTIONS]\n"
  printf "  domo template show --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--exec, -x EXECUTABLE"
    printf "    Command used to show the template\n"
    printf "    %s\n" "Default: ${DOMO_SHOW_CMD}"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "TEMPLATE"
    printf "    Name of the template\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo template show cargo\n"
    printf "  domo template show cargo -x bat\n"
    echo

  fi
}

domo_template_add_usage() {
  printf "domo template add - Add a new template\n\n"

  printf "%s\n" "Usage:"
  printf "  domo template add TEMPLATE\n"
  printf "  domo template add --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "TEMPLATE"
    printf "    Name of the template\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo template add poetry\n"
    echo

  fi
}

domo_template_edit_usage() {
  printf "domo template edit - Edit a template\n\n"
  printf "Alias: e\n"
  echo

  printf "%s\n" "Usage:"
  printf "  domo template edit [TEMPLATE]\n"
  printf "  domo template edit --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "TEMPLATE"
    printf "    Name of the template\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo template edit\n"
    printf "  domo template edit python\n"
    echo

  fi
}

domo_template_which_usage() {
  printf "domo template which - Locates a template\n\n"

  printf "%s\n" "Usage:"
  printf "  domo template which [TEMPLATE]\n"
  printf "  domo template which --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "TEMPLATE"
    printf "    Name of the template\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo template which python\n"
    echo

  fi
}

domo_backend_usage() {
  printf "domo backend - Backend related commands\n\n"
  printf "Alias: back\n"
  echo

  printf "%s\n" "Usage:"
  printf "  domo backend COMMAND\n"
  printf "  domo backend [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   Set the global backend\n" "set  "
  printf "  %s   Show the global backend\n" "get  "
  printf "  %s   List backends\n" "list "
  printf "  %s   Show a backend\n" "show "
  printf "  %s   Add a new backend\n" "add  "
  printf "  %s   Edit a backend\n" "edit "
  printf "  %s   Locates a backend\n" "which"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

domo_backend_set_usage() {
  printf "domo backend set - Set the global backend\n\n"

  printf "%s\n" "Usage:"
  printf "  domo backend set BACKEND\n"
  printf "  domo backend set --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "BACKEND"
    printf "    Name of the backend\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo backend set vscode\n"
    echo

  fi
}

domo_backend_get_usage() {
  printf "domo backend get - Show the global backend\n\n"

  printf "%s\n" "Usage:"
  printf "  domo backend get\n"
  printf "  domo backend get --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo backend get\n"
    echo

  fi
}

domo_backend_list_usage() {
  printf "domo backend list - List backends\n\n"
  printf "Alias: ls\n"
  echo

  printf "%s\n" "Usage:"
  printf "  domo backend list\n"
  printf "  domo backend list --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo backend list\n"
    echo

  fi
}

domo_backend_show_usage() {
  printf "domo backend show - Show a backend\n\n"

  printf "%s\n" "Usage:"
  printf "  domo backend show [BACKEND] [OPTIONS]\n"
  printf "  domo backend show --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--exec, -x EXECUTABLE"
    printf "    Command used to show the backend\n"
    printf "    %s\n" "Default: ${DOMO_SHOW_CMD}"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "BACKEND"
    printf "    Name of the backend\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo backend show cargo\n"
    printf "  domo backend show cargo -x bat\n"
    echo

  fi
}

domo_backend_add_usage() {
  printf "domo backend add - Add a new backend\n\n"

  printf "%s\n" "Usage:"
  printf "  domo backend add BACKEND\n"
  printf "  domo backend add --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "BACKEND"
    printf "    Name of the backend\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo backend add vscode\n"
    echo

  fi
}

domo_backend_edit_usage() {
  printf "domo backend edit - Edit a backend\n\n"

  printf "%s\n" "Usage:"
  printf "  domo backend edit [BACKEND]\n"
  printf "  domo backend edit --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "BACKEND"
    printf "    Name of the backend\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo backend edit\n"
    printf "  domo backend edit tmux\n"
    echo

  fi
}

domo_backend_which_usage() {
  printf "domo backend which - Locates a backend\n\n"

  printf "%s\n" "Usage:"
  printf "  domo backend which BACKEND\n"
  printf "  domo backend which --help | -h\n"
  echo

  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "BACKEND"
    printf "    Name of the backend\n"
    echo

    printf "%s\n" "Examples:"
    printf "  domo backend which tmux\n"
    echo

  fi
}

normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

backend_exists() {
    if [[ -f "${DATA_DIR}/backends/${1}" ]] || [[ -f "${CONFIG_DIR}/backends/${1}" ]]; then
        return 0
    else
        return 1
    fi
}

filter_backends() {
    # Get all backends without formatting
    local backends="$(raw_list_backends)"

    if [[ -n "${backends}" ]]; then
        pipe "${backends}" | command "${deps[gum]}" filter --placeholder "Filter backends..."
    fi
}

find_backend() {
    # Find a backend by its name.
    local backend="${CONFIG_DIR}/backends/${1}"

    if [[ ! -f "${backend}" ]]; then
        # If not found, search in default backends
        backend="${DATA_DIR}/backends/${1}"

        if [[ ! -f "${backend}" ]]; then
            error "backend '${1}' not found"
            exit 1
        fi
    fi

    echo "${backend}"
}

get_global_backend() {
    cat "${DATA_DIR}/global-backend"
}

list_backends() {
    default_backend="$(get_global_backend)"

    #
    # User defined backends
    #
    for file in $(command ls "${CONFIG_DIR}/backends"); do
        if [[ "${file}" == "${default_backend}" ]]; then
            echo "$(green "*") ${file}"
        else
            echo "  ${file}"
        fi
    done

    #
    # Default backends
    #
    for file in $(command ls "${DATA_DIR}/backends"); do
        if [[ "${file}" == "${default_backend}" ]]; then
            echo "$(green "*") ${file}"
        else
            echo "$(blue "D") ${file}"
        fi
    done
}

raw_list_backends() {
    #
    # User defined backends
    #
    for file in $(command ls "${CONFIG_DIR}/backends"); do
        echo "${file}"
    done

    #
    # Default backends
    #
    for file in $(command ls "${DATA_DIR}/backends"); do
        echo "${file}"
    done
}

set_global_backend() {
    echo "${1}" > "${DATA_DIR}/global-backend"
}

print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
black() { print_in_color "\e[30m" "$*"; }
white() { print_in_color "\e[37m" "$*"; }

bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }

red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
black_bold() { print_in_color "\e[1;30m" "$*"; }
white_bold() { print_in_color "\e[1;37m" "$*"; }

red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }
black_underlined() { print_in_color "\e[4;30m" "$*"; }
white_underlined() { print_in_color "\e[4;37m" "$*"; }

error() {
    echo "$(red "domo:") ${1}"
}

info() {
    echo "$(blue "domo:") ${1}"
}

success() {
    echo "$(green "domo:") ${1}"
}

warn() {
    echo "$(yellow "domo:") ${1}"
}

pipe() {
    echo "${1}" | tr ' ' '\n'
}

filter_projects() {
    list_projects | command "${deps[gum]}" filter --placeholder="Filter projects"
}

list_projects() {
    find "${DOMO_HOME}" -maxdepth 2 -mindepth 2 -type d ! -name '.*' \
        | sed "s!${DOMO_HOME}/!!"
}

project_exists() {
    [[ -d "${DOMO_HOME}/${1}/${2}" ]] && return 0 || return 1
}

run_silent() {
  command ${@} &> /dev/null
}

# Filter spaces using gum choose.
#
# Usage: filter_spaces "Header text"
filter_spaces() {
    list_spaces | command "${deps[gum]}" choose --header "${1}" --no-show-help
}

list_spaces() {
    find "${DOMO_HOME}" -maxdepth 1 -mindepth 1 -type d ! -name '.*' \
        | sed "s!${DOMO_HOME}/!!"
}

space_exists() {
    [[ -d "${DOMO_HOME}/${1}" ]] && return 0 || return 1
}

filter_templates() {
    local templates="$(raw_list_templates)"

    if [[ -n "${templates}" ]]; then
        pipe "${templates}" | command "${deps[gum]}" filter --placeholder="Select a template"
    fi
}

find_template() {
    # Find a template by its name.
    local template="${CONFIG_DIR}/templates/${1}"

    if [[ ! -f "${template}" ]]; then
        # If not found, search in default templates
        template="${DATA_DIR}/templates/${1}"

        if [[ ! -f "${template}" ]]; then
            error "template '${1}' not found"
            exit 1
        fi
    fi

    echo "${template}"
}

list_templates() {
    #
    # User defined templates
    #
    for file in $(command ls "${CONFIG_DIR}/templates"); do
        echo "  ${file}"
    done

    #
    # Default templates
    #
    for file in $(command ls "${DATA_DIR}/templates"); do
        echo "$(blue "D") ${file}"
    done
}

raw_list_templates() {
    #
    # User defined templates
    #
    for file in $(command ls "${CONFIG_DIR}/templates"); do
        echo "${file}"
    done

    #
    # Default templates
    #
    for file in $(command ls "${DATA_DIR}/templates"); do
        echo "${file}"
    done
}

template_exists() {
    [[ ! -f "${DATA_DIR}/templates/${1}" ]] && [[ ! -f "${CONFIG_DIR}/templates/${1}" ]] && return 1 || return 0
}

validate_backend_exists() {
    if ! backend_exists "${1}"; then
        error "backend not found: ${1}"
    fi
}

validate_backend_is_missing() {
    if [[ -f "${HOME}/.config/pm/backends/${1}.sh" ]]; then
        error "backend already exists: ${1}"
    fi
}

validate_dir_exists() {
  [[ -d "$1" ]] || echo "must be an existing directory"
}

validate_file_exists() {
  [[ -f "$1" ]] || echo "must be an existing file"
}

validate_integer() {
  [[ "$1" =~ ^[0-9]+$ ]] || echo "must be an integer"
}

validate_not_empty() {
  [[ -z "$1" ]] && echo "must not be empty"
}

validate_project_exists() {
    if [[ ! "${1}" = */* ]] || [[ ! -d "${DOMO_HOME}/${1}" ]]; then
        error "project not found: ${1}"
    fi
}

validate_project_is_missing() {
    if [[ ! "${1}" = */* ]] || [[ -d "${DOMO_HOME}/${1}" ]]; then
        error "project already exists: ${1}"
    fi
}

validate_space_exists() {
    if ! space_exists "${1}"; then
        error "space not found: ${1}"
    fi
}

validate_space_is_missing() {
    if command grep "${1}" "${DOMO_HOME}/spaces" &> /dev/null; then
        error "space already exists: ${1}"
    fi
}

validate_template_exists() {
    if ! template_exists "${1}"; then
        error "template not found: ${1}"
    fi
}

validate_template_is_missing() {
    if [[ -f "${HOME}/.config/pm/templates/${1}.sh" ]]; then
        error "template already exists: ${1}"
    fi
}

domo_create_command() {

  local path="${args[path]}"

  local template="${args[--template]}"
  local backend="${args[--backend]}"

  # Path to the current template
  TEMPLATE_SCRIPT="$(find_template "${template}")"

  #
  # BACKEND
  #

  # If the backend is not specified, use the global backend
  if [[ -z "${backend}" ]]; then
      backend="$(get_global_backend)"
  fi

  # Then get the full path to the 'backend' script
  if [[ -n "${backend}" ]]; then
      BACKEND_SCRIPT="$(find_backend "${backend}")"
  fi

  #
  # SPACE and PROJECT
  #

  space="$(dirname "${path}")"

  if ! space_exists "${space}"; then
      error "'${space}' is not a valid space"
      exit 1
  fi

  project_name="$(basename "${path}")"

  if project_exists "${space}" "${project_name}"; then
      error "project '${project_name}' already exists in space '${space}'"
      exit 1
  fi

  # Export variable that will be usable within the template and backend scripts
  export SPACE="${space}"
  export SPACE_PATH="${DOMO_HOME}/${space}"

  export PROJECT="${project_name}"
  export PROJECT_PATH="${DOMO_HOME}/${space}/${project_name}"

  source "${TEMPLATE_SCRIPT}"

  if [[ "${?}" -eq 0 ]]; then
      success "project '${project_name}' created in space '${space}'"
  else
      error "unable to create project"
      exit 1
  fi

  source "${BACKEND_SCRIPT}"

}

domo_clone_command() {

  #
  # Arguments
  #

  local repository="${args[repository]}"
  local path="${args[path]}"

  space="$(dirname "${path}")"
  name="$(basename "${path}")"

  if project_exists "${space}" "${name}"; then
      error "project '${name}' already exists in space '${space}'"
      exit 1
  fi

  local destination="${DOMO_HOME}/${space}/${name}"

  command "${deps[git]}" clone "${repository}" "${destination}"
  success "cloned project ${name} in space ${space}"

}

domo_open_command() {

  #
  # Arguments
  #

  local path="${args[path]}"

  #
  # Flags
  #

  local backend="${args[--backend]}"

  #
  # BACKEND
  #

  # If the environment is not specified, use the global environment
  if [[ -z "${backend}" ]]; then
      backend="$(get_global_backend)"
  fi

  # Then get the full path to the 'backend' script
  if [[ -n "${backend}" ]]; then
      BACKEND_SCRIPT="$(find_backend "${backend}")"
  fi

  #
  # PATH
  #

  # If the path is not specified, use the filtered projects
  if [[ -z "${path}" ]]; then
      local path="${args[path]:-"$(filter_projects)"}"

      if [[ -z "${path}" ]]; then
          exit 1
      fi
  fi

  space="$(dirname "${path}")"
  name="$(basename "${path}")"

  if ! project_exists "${space}" "${name}"; then
      error "no project '${name}' in space '${space}'"
      exit 1
  fi

  #
  # RUN
  #

  # Export variable that are available within the 'backend' script
  export SPACE="${space}"
  export SPACE_PATH="${DOMO_HOME}/${space}"

  export PROJECT="${name}"
  export PROJECT_PATH="${DOMO_HOME}/${space}/${name}"

  source "${BACKEND_SCRIPT}"

}

domo_list_command() {

  list_projects

}

domo__install_command() {

  #
  # Arguments
  #
  local destination="${args[destination]}"

  dirs=(
      # The home directory for domo projects
      "${DOMO_HOME}"

      # Store domo data
      "${DATA_DIR}/templates"
      "${DATA_DIR}/backends"

      # Store user configuration
      "${CONFIG_DIR}/templates"
      "${CONFIG_DIR}/backends"
  )

  # Create missing directories
  for dir in ${dirs[*]}; do
      if [[ ! -d "${dir}" ]]; then
          command mkdir -p "${dir}"
      fi
  done

  # Copy the default templates and backends into the data directory
  command cp -R ./backends "${DATA_DIR}/"
  command cp -R ./templates "${DATA_DIR}/"

  # Sets the default global backend to 'shell'
  echo "shell" > "${DATA_DIR}/global-backend"

  command cp domo "${destination}/domo"
  success "ready to use"

}

domo__uninstall_command() {

  #
  # Arguments
  #
  local destination="${args[destination]}"

  command rm -rf "${DATA_DIR}"

  if [[ -f "${destination}/domo" ]]; then
      command rm "${destination}/domo"
  fi

  success "uninstalled successfully"

}

domo_space_add_command() {

  spaces=''
  eval "spaces=(${args[spaces]:-})"

  for space in "${spaces[@]}"; do
      run_silent mkdir "${DOMO_HOME}/${space}"
      success "added space '${space}'"
  done

}

domo_space_list_command() {

  list_spaces

}

domo_template_list_command() {

  list_templates

}

domo_template_show_command() {

  local template_name="${args[template]}"
  local command="${args[--exec]}"

  local template="$(find_template "${template_name}")"

  command ${command} "${template}"

}

domo_template_add_command() {

  local template_name="${args[template]}"

  local new_template_path="${CONFIG_DIR}/templates/${template_name}"

  command cat > ${new_template_path} << EOF
# vim: set filetype=sh:
#
# Information about the project are passed as environment variables in the following way:
#
# SPACE        - name of the space the project must be created in.
#
# SPACE_PATH   - absolute path to the space directory.
#
# PROJECT      - name of the project that must be created.
#
# PROJECT_PATH - absolute path to the project directory.
#
echo "Hi from '${template_name}' template"
EOF

  command "${EDITOR:-vim}" ${new_template_path}

}

domo_template_edit_command() {

  local template_name="${args[template]:-"$(filter_templates)"}"

  if ! template_exists "${template_name}"; then
      exit 1
  fi

  local template="$(find_template "${template_name}")"

  command ${EDITOR:-vim} "${template}"

}

domo_template_which_command() {

  local template_name="${args[template]}"

  echo "$(find_template "${template_name}")"

}

domo_backend_set_command() {

  local backend="${args[backend]}"

  set_global_backend "${backend}"
  success "set global backend"

}

domo_backend_get_command() {

  get_global_backend

}

domo_backend_list_command() {

  list_backends

}

domo_backend_show_command() {

  local backend_name="${args[backend]:-"$(filter_backends)"}"
  local command="${args[--exec]}"

  local backend_path="$(find_backend "${backend_name}")"

  command ${command} "${backend_path}"

}

domo_backend_add_command() {

  local backend_name="${args[backend]}"

  local new_backend_path="${CONFIG_DIR}/backends/${backend_name}"

  command cat > ${new_backend_path} << EOF
# vim: set filetype=sh:
#
# Information about the project are passed as environment variables in the following way:
#
# SPACE        - name of the space the project must be created in.
#
# SPACE_PATH   - absolute path to the space directory.
#
# PROJECT      - name of the project that must be created.
#
# PROJECT_PATH - absolute path to the project directory.
#
echo "Hi from '${backend_name}' backend"
EOF

  command "${EDITOR:-vim}" ${new_backend_path}

}

domo_backend_edit_command() {

  local backend_name="${args[backend]:-"$(filter_backends)"}"

  if ! backend_exists "${backend_name}"; then
      exit 1
  fi

  local backend="$(find_backend "${backend_name}")"

  command ${EDITOR:-vim} "${backend}"

}

domo_backend_which_command() {

  local env_name="${args[backend]}"

  echo "$(find_backend "${env_name}")"

}

parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        domo_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  export DOMO_HOME="${DOMO_HOME:-${HOME}/dev}"
  export DOMO_SHOW_CMD="${DOMO_SHOW_CMD:-cat}"

  env_var_names+=("DOMO_HOME")
  env_var_names+=("DOMO_SHOW_CMD")

  missing_deps=

  if ! command -v git >/dev/null 2>&1; then
    printf "$(error)missing dependency: git\n" >&2
    missing_deps=1
  else
    deps['git']="$(command -v git | head -n1)"
  fi

  if ! command -v gum >/dev/null 2>&1; then
    printf "$(error)missing dependency: gum\n" >&2
    missing_deps=1
  else
    deps['gum']="$(command -v gum | head -n1)"
  fi

  if [[ -n $missing_deps ]]; then
    exit 1
  fi

  action=${1:-}

  case $action in
    -*) ;;

    create)
      action="create"
      shift
      domo_create_parse_requirements "$@"
      shift $#
      ;;

    clone)
      action="clone"
      shift
      domo_clone_parse_requirements "$@"
      shift $#
      ;;

    open | o)
      action="open"
      shift
      domo_open_parse_requirements "$@"
      shift $#
      ;;

    list | ls)
      action="list"
      shift
      domo_list_parse_requirements "$@"
      shift $#
      ;;

    _install)
      action="_install"
      shift
      domo__install_parse_requirements "$@"
      shift $#
      ;;

    _uninstall)
      action="_uninstall"
      shift
      domo__uninstall_parse_requirements "$@"
      shift $#
      ;;

    space)
      action="space"
      shift
      domo_space_parse_requirements "$@"
      shift $#
      ;;

    template | temp)
      action="template"
      shift
      domo_template_parse_requirements "$@"
      shift $#
      ;;

    backend | back)
      action="backend"
      shift
      domo_backend_parse_requirements "$@"
      shift $#
      ;;

    "")
      domo_usage >&2
      exit 1
      ;;

    *)
      if [[ -x "$(command -v "domo-$action")" ]]; then
        shift
        exec "domo-$action" "$@"
      else
        printf "$(error)invalid command: %s\n" "$action" >&2
        exit 1
      fi
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "$(error)invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

domo_create_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_create_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="create"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --template | -t)

        if [[ -n ${2+x} ]]; then
          args['--template']="$2"
          shift
          shift
        else
          printf "%s\n" "$(error)--template requires an argument: --template, -t TEMPLATE" >&2
          exit 1
        fi
        ;;

      --backend | -b)

        if [[ -n ${2+x} ]]; then
          args['--backend']="$2"
          shift
          shift
        else
          printf "%s\n" "$(error)--backend requires an argument: --backend, -b BACKEND" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['path']+x} ]]; then
          args['path']=$1
          shift
        else
          printf "$(error)invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['--template']+x} ]]; then
    printf "$(error)missing required flag: --template, -t TEMPLATE\n" >&2
    exit 1
  fi

  if [[ -v args['path'] && -n $(validate_project_is_missing "${args['path']:-}") ]]; then
    printf "$(error)validation error in %s:\n%s\n" "PATH" "$(validate_project_is_missing "${args['path']:-}")" >&2
    exit 1
  fi

  if [[ -v args['--template'] && -n $(validate_template_exists "${args['--template']:-}") ]]; then
    printf "$(error)validation error in %s:\n%s\n" "--template, -t TEMPLATE" "$(validate_template_exists "${args['--template']:-}")" >&2
    exit 1
  fi

  if [[ -v args['--backend'] && -n $(validate_backend_exists "${args['--backend']:-}") ]]; then
    printf "$(error)validation error in %s:\n%s\n" "--backend, -b BACKEND" "$(validate_backend_exists "${args['--backend']:-}")" >&2
    exit 1
  fi

}

domo_clone_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_clone_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="clone"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['repository']+x} ]]; then
          args['repository']=$1
          shift

        elif [[ -z ${args['path']+x} ]]; then
          args['path']=$1
          shift
        else
          printf "$(error)invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['repository']+x} ]]; then
    printf "$(error)missing required argument: REPOSITORY\n" >&2

    exit 1
  fi

  if [[ -z ${args['path']+x} ]]; then
    printf "$(error)missing required argument: PATH\n" >&2

    exit 1
  fi

}

domo_open_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_open_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="open"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --backend | -b)

        if [[ -n ${2+x} ]]; then
          args['--backend']="$2"
          shift
          shift
        else
          printf "%s\n" "$(error)--backend requires an argument: --backend, -b BACKEND" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['path']+x} ]]; then
          args['path']=$1
          shift
        else
          printf "$(error)invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -v args['path'] && -n $(validate_project_exists "${args['path']:-}") ]]; then
    printf "$(error)validation error in %s:\n%s\n" "PATH" "$(validate_project_exists "${args['path']:-}")" >&2
    exit 1
  fi

  if [[ -v args['--backend'] && -n $(validate_backend_exists "${args['--backend']:-}") ]]; then
    printf "$(error)validation error in %s:\n%s\n" "--backend, -b BACKEND" "$(validate_backend_exists "${args['--backend']:-}")" >&2
    exit 1
  fi

}

domo_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "$(error)invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

domo__install_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo__install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="_install"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['destination']+x} ]]; then
          args['destination']=$1
          shift
        else
          printf "$(error)invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['destination']+x} ]]; then
    printf "$(error)missing required argument: DESTINATION\n" >&2

    exit 1
  fi

}

domo__uninstall_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo__uninstall_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="_uninstall"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['destination']+x} ]]; then
          args['destination']=$1
          shift
        else
          printf "$(error)invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['destination']+x} ]]; then
    printf "$(error)missing required argument: DESTINATION\n" >&2

    exit 1
  fi

}

domo_space_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_space_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    add)
      action="add"
      shift
      domo_space_add_parse_requirements "$@"
      shift $#
      ;;

    list | ls)
      action="list"
      shift
      domo_space_list_parse_requirements "$@"
      shift $#
      ;;

    "")
      domo_space_usage >&2
      exit 1
      ;;

    *)
      printf "$(error)invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "$(error)invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

domo_space_add_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_space_add_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="space add"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        escaped="$(printf '%q' "$1")"
        if [[ -z ${args['spaces']+x} ]]; then
          args['spaces']="$escaped"
        else
          args['spaces']="${args['spaces']} $escaped"

        fi
        shift

        ;;

    esac
  done

  if [[ -z ${args['spaces']+x} ]]; then
    printf "$(error)missing required argument: SPACES\n" >&2

    exit 1
  fi

  if [[ -v args['spaces'] ]]; then
    values=''
    eval "values=(${args['spaces']})"
    for value in "${values[@]}"; do
      if [[ -n $(validate_space_is_missing "$value") ]]; then
        printf "$(error)validation error in %s:\n%s\n" "SPACES" "$(validate_space_is_missing "$value")" >&2
        exit 1
      fi
    done
  fi

}

domo_space_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_space_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="space list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "$(error)invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

domo_template_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_template_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    list | ls)
      action="list"
      shift
      domo_template_list_parse_requirements "$@"
      shift $#
      ;;

    show)
      action="show"
      shift
      domo_template_show_parse_requirements "$@"
      shift $#
      ;;

    add)
      action="add"
      shift
      domo_template_add_parse_requirements "$@"
      shift $#
      ;;

    edit | e)
      action="edit"
      shift
      domo_template_edit_parse_requirements "$@"
      shift $#
      ;;

    which)
      action="which"
      shift
      domo_template_which_parse_requirements "$@"
      shift $#
      ;;

    "")
      domo_template_usage >&2
      exit 1
      ;;

    *)
      printf "$(error)invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "$(error)invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

domo_template_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_template_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="template list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "$(error)invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

domo_template_show_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_template_show_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="template show"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --exec | -x)

        if [[ -n ${2+x} ]]; then
          args['--exec']="$2"
          shift
          shift
        else
          printf "%s\n" "$(error)--exec requires an argument: --exec, -x EXECUTABLE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['template']+x} ]]; then
          args['template']=$1
          shift
        else
          printf "$(error)invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['template']+x} ]]; then
    printf "$(error)missing required argument: TEMPLATE\n" >&2

    exit 1
  fi

  [[ -n ${args['--exec']:-} ]] || args['--exec']="${DOMO_SHOW_CMD}"

  if [[ -v args['template'] && -n $(validate_template_exists "${args['template']:-}") ]]; then
    printf "$(error)validation error in %s:\n%s\n" "TEMPLATE" "$(validate_template_exists "${args['template']:-}")" >&2
    exit 1
  fi

}

domo_template_add_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_template_add_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="template add"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['template']+x} ]]; then
          args['template']=$1
          shift
        else
          printf "$(error)invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['template']+x} ]]; then
    printf "$(error)missing required argument: TEMPLATE\n" >&2

    exit 1
  fi

  if [[ -v args['template'] && -n $(validate_template_is_missing "${args['template']:-}") ]]; then
    printf "$(error)validation error in %s:\n%s\n" "TEMPLATE" "$(validate_template_is_missing "${args['template']:-}")" >&2
    exit 1
  fi

}

domo_template_edit_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_template_edit_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="template edit"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['template']+x} ]]; then
          args['template']=$1
          shift
        else
          printf "$(error)invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -v args['template'] && -n $(validate_template_exists "${args['template']:-}") ]]; then
    printf "$(error)validation error in %s:\n%s\n" "TEMPLATE" "$(validate_template_exists "${args['template']:-}")" >&2
    exit 1
  fi

}

domo_template_which_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_template_which_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="template which"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['template']+x} ]]; then
          args['template']=$1
          shift
        else
          printf "$(error)invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -v args['template'] && -n $(validate_template_exists "${args['template']:-}") ]]; then
    printf "$(error)validation error in %s:\n%s\n" "TEMPLATE" "$(validate_template_exists "${args['template']:-}")" >&2
    exit 1
  fi

}

domo_backend_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_backend_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    set)
      action="set"
      shift
      domo_backend_set_parse_requirements "$@"
      shift $#
      ;;

    get)
      action="get"
      shift
      domo_backend_get_parse_requirements "$@"
      shift $#
      ;;

    list | ls)
      action="list"
      shift
      domo_backend_list_parse_requirements "$@"
      shift $#
      ;;

    show)
      action="show"
      shift
      domo_backend_show_parse_requirements "$@"
      shift $#
      ;;

    add)
      action="add"
      shift
      domo_backend_add_parse_requirements "$@"
      shift $#
      ;;

    edit)
      action="edit"
      shift
      domo_backend_edit_parse_requirements "$@"
      shift $#
      ;;

    which)
      action="which"
      shift
      domo_backend_which_parse_requirements "$@"
      shift $#
      ;;

    "")
      domo_backend_usage >&2
      exit 1
      ;;

    *)
      printf "$(error)invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "$(error)invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

domo_backend_set_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_backend_set_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="backend set"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['backend']+x} ]]; then
          args['backend']=$1
          shift
        else
          printf "$(error)invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['backend']+x} ]]; then
    printf "$(error)missing required argument: BACKEND\n" >&2

    exit 1
  fi

  if [[ -v args['backend'] && -n $(validate_backend_exists "${args['backend']:-}") ]]; then
    printf "$(error)validation error in %s:\n%s\n" "BACKEND" "$(validate_backend_exists "${args['backend']:-}")" >&2
    exit 1
  fi

}

domo_backend_get_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_backend_get_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="backend get"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "$(error)invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

domo_backend_list_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_backend_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="backend list"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "$(error)invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

domo_backend_show_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_backend_show_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="backend show"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --exec | -x)

        if [[ -n ${2+x} ]]; then
          args['--exec']="$2"
          shift
          shift
        else
          printf "%s\n" "$(error)--exec requires an argument: --exec, -x EXECUTABLE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['backend']+x} ]]; then
          args['backend']=$1
          shift
        else
          printf "$(error)invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  [[ -n ${args['--exec']:-} ]] || args['--exec']="${DOMO_SHOW_CMD}"

  if [[ -v args['backend'] && -n $(validate_backend_exists "${args['backend']:-}") ]]; then
    printf "$(error)validation error in %s:\n%s\n" "BACKEND" "$(validate_backend_exists "${args['backend']:-}")" >&2
    exit 1
  fi

}

domo_backend_add_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_backend_add_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="backend add"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['backend']+x} ]]; then
          args['backend']=$1
          shift
        else
          printf "$(error)invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['backend']+x} ]]; then
    printf "$(error)missing required argument: BACKEND\n" >&2

    exit 1
  fi

  if [[ -v args['backend'] && -n $(validate_backend_is_missing "${args['backend']:-}") ]]; then
    printf "$(error)validation error in %s:\n%s\n" "BACKEND" "$(validate_backend_is_missing "${args['backend']:-}")" >&2
    exit 1
  fi

}

domo_backend_edit_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_backend_edit_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="backend edit"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['backend']+x} ]]; then
          args['backend']=$1
          shift
        else
          printf "$(error)invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -v args['backend'] && -n $(validate_backend_exists "${args['backend']:-}") ]]; then
    printf "$(error)validation error in %s:\n%s\n" "BACKEND" "$(validate_backend_exists "${args['backend']:-}")" >&2
    exit 1
  fi

}

domo_backend_which_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        domo_backend_which_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="backend which"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "$(error)invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['backend']+x} ]]; then
          args['backend']=$1
          shift
        else
          printf "$(error)invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['backend']+x} ]]; then
    printf "$(error)missing required argument: BACKEND\n" >&2

    exit 1
  fi

  if [[ -v args['backend'] && -n $(validate_backend_exists "${args['backend']:-}") ]]; then
    printf "$(error)validation error in %s:\n%s\n" "BACKEND" "$(validate_backend_exists "${args['backend']:-}")" >&2
    exit 1
  fi

}

initialize() {
  version="1.8.4"
  long_usage=''
  set -e

  declare -g DATA_DIR="${HOME}/.local/share/domo"

  declare -g CONFIG_DIR="${HOME}/.config/domo"

  export DOMO_HOME="${DOMO_HOME:-${HOME}/dev}"
  export DOMO_SHOW_CMD="${DOMO_SHOW_CMD:-cat}"

  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

}

run() {
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "create") domo_create_command ;;
    "clone") domo_clone_command ;;
    "open") domo_open_command ;;
    "list") domo_list_command ;;
    "_install") domo__install_command ;;
    "_uninstall") domo__uninstall_command ;;
    "space") domo_space_command ;;
    "space add") domo_space_add_command ;;
    "space list") domo_space_list_command ;;
    "template") domo_template_command ;;
    "template list") domo_template_list_command ;;
    "template show") domo_template_show_command ;;
    "template add") domo_template_add_command ;;
    "template edit") domo_template_edit_command ;;
    "template which") domo_template_which_command ;;
    "backend") domo_backend_command ;;
    "backend set") domo_backend_set_command ;;
    "backend get") domo_backend_get_command ;;
    "backend list") domo_backend_list_command ;;
    "backend show") domo_backend_show_command ;;
    "backend add") domo_backend_add_command ;;
    "backend edit") domo_backend_edit_command ;;
    "backend which") domo_backend_which_command ;;
  esac
}

initialize
run "$@"
